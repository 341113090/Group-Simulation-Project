#BlueJ class context
comment0.target=AnimationManager
comment0.text=\n\ AnimationManager\ contains\ a\ number\ of\ useful,\ static\ methods\ to\ help\ import\ and\ manupulate\ Animations.\n\ This\ includes\ the\ ability\ to\ import\ straight\ from\ a\ SpriteSheet,\ as\ well\ as\ adding\ layers\ on\ top\ of\n\ each\ other\ (I.e.\ draw\ armor\ onto\ body)\ and\ cropping\ images\ (for\ tighter\ collision\ detection).\n\n\ Note\ that\ MatchLargest\ DOESN'T\ WORK\ smoothly\ for\ animations\ with\ LPC\ sprites\ because\ for\ some\ reason\n\ a\ frame\ ends\ up\ off\ center\ despite\ my\ initial\ attempts\ to\ fix\ (TODO-\ FIX\!)\n\n\ @author\ Jordan\ Cohen\n\ @version\ 0.0.3\n\ @since\ 0.0.1\n
comment1.params=spriteSheet\ startRow\ numRows\ numFrames\ width\ height
comment1.target=Animation\ createAnimation(greenfoot.GreenfootImage,\ int,\ int,\ int,\ int,\ int)
comment1.text=\ \ This\ will\ allow\ for\ importing\ armor\ etc\ to\ make\ the\ character\ dynamic\!\ Without\ spritefoot\ work\!\n\ \ Rows\ must\ be\ 4\ (directional)\ or\ 1\ (non-directional).\ This\ is\ designed\ to\ work\ with\ spritesheets\ from\n\ \ LPC\ but\ could\ be\ tailored\ to\ work\ with\ other\ source\ material.\n\n\ \ @param\ spriteSheet\ \ the\ Spritesheet\ to\ pull\ frames\ from\n\ \ @param\ startRow\ \ \ \ \ the\ row\ on\ which\ the\ desired\ sprites\ are\ located\ (not\ x,y\ coordinate)\n\ \ @param\ numFrames\ \ \ \ the\ number\ of\ frames\ in\ the\ animation\n\ \ @param\ terminal\ \ \ \ \ is\ this\ a\ terminal\ animation?\ (One\ that\ ends\ after\ it\ plays\ a\ set\ number\ of\ times).\n\ \ @return\ Animation\ \ \ an\ appropriate\ Animation\ object\ that\ is\ either\ 1\ direction\ or\ 4\ direction.\n\n
comment10.params=gi\ leftPad\ rightPad\ topPad\ bottomPad\ maxWidth\ maxHeight
comment10.target=greenfoot.GreenfootImage\ addPadding(greenfoot.GreenfootImage,\ int,\ int,\ int,\ int,\ int,\ int)
comment11.params=rgbaValue
comment11.target=int[]\ unpackPixel(int)
comment11.text=\n\ Takes\ in\ an\ rgb\ value\ -\ the\ kind\ that\ is\ returned\ from\ BufferedImage's\n\ getRGB()\ method\ -\ and\ returns\ 4\ integers\ for\ easy\ manipulation.\n\n\ By\ Jordan\ Cohen\n\ Version\ 0.2\n\n\ @param\ rgbaValue\ The\ value\ of\ a\ single\ pixel\ as\ an\ integer,\ representing<br>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 8\ bits\ for\ red,\ green\ and\ blue\ and\ 8\ bits\ for\ alpha\:<br>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>alpha\ \ \ red\ \ \ \ \ green\ \ \ blue</pre>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>00000000000000000000000000000000</pre>\n\ @return\ int[4]\ \ \ Array\ containing\ 4\ shorter\ ints<br>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>0\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 3</pre>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>alpha\ \ \ red\ \ \ \ \ green\ \ \ blue</pre>\n
comment12.params=r\ g\ b\ a
comment12.target=int\ packagePixel(int,\ int,\ int,\ int)
comment12.text=\n\ Takes\ in\ a\ red,\ green,\ blue\ and\ alpha\ integer\ and\ uses\ bit-shifting\n\ to\ package\ all\ of\ the\ data\ into\ a\ single\ integer,\ which\ can\ be\ used\ to\n\ set\ a\ pixel\ in\ a\ BufferedImage.\n\n\ @param\ \ \ int\ red\ value\ (0-255)\n\ @param\ \ \ int\ green\ value\ (0-255)\n\ @param\ \ \ int\ blue\ value\ (0-255)\n\ @param\ \ \ int\ alpha\ value\ (0-255)\n\n\ @return\ int\ \ Integer\ representing\ 32\ bit\ integer\ pixel\ ready\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ BufferedImage\n
comment2.params=spriteSheet\ xPos\ yPos\ frameWidth\ frameHeight
comment2.target=greenfoot.GreenfootImage\ getSlice(greenfoot.GreenfootImage,\ int,\ int,\ int,\ int)
comment2.text=\n\ Grabs\ a\ part\ of\ a\ sprite\ sheet\ (or\ any\ other\ GreenfootImage)\ and\ returns\ it\ as\ a\ new\n\ GreenfootImage.\ The\ sprite\ sheet\ must\ be\ larger\ than\ the\ resulting\ image.\n\n\ @param\ spriteSheet\ \ \ the\ larger\ spritesheet\ to\ pull\ images\ from\n\ @param\ xPos\ \ the\ x\ position\ (of\ the\ left)\ of\ the\ desired\ spot\ to\ draw\ from\n\ @param\ yPos\ \ the\ y\ position\ (of\ the\ top)\ of\ the\ desired\ spot\ to\ draw\ from\n\ @param\ frameWidth\ \ \ \ \ the\ horizontal\ tile\ size\n\ @param\ frameHeight\ \ \ \ the\ vertical\ tile\ size\n\ @return\ GreenfootImage\ \ \ the\ resulting\ image\n
comment3.params=source\ targetX\ targetY
comment3.target=greenfoot.GreenfootImage\ getCroppedImage(greenfoot.GreenfootImage,\ int,\ int)
comment3.text=\n\ The\ Tight\ Selection\ core.\ This\ is\ the\ algorithm\ that\ finds\ the\ tightest\ rectangle\ around\ a\ shape.\n\ Result\ does\ not\ include\ a\ border\ -\ only\ the\ tighest\ possible\ selection.\n\n\ Note\:\ This\ feature\ will\ not\ work\ on\ sprites\ that\ overlap\ each\ other.\ Sprites\ must\ be\ within\ their\n\ own\ bounding\ rectangle.\ TODO\:\ Improve\ This.\n\n\ @param\ source\ \ \ \ The\ GreenfootImage\ that\ is\ the\ source\ for\ the\ resulting\ selection\n\ @param\ targetX\ \ \ The\ X\ coordinate\ that\ was\ selected,\ should\ be\ on\ the\ image,\ not\ on\ transparency\n\ @param\ targetY\ \ \ The\ Y\ coordinate\ that\ was\ selected,\ should\ be\ on\ the\ image,\ not\ on\ transparency\n\n\ @return\ GreenfootImage\ \ \ Returns\ a\ GreenfootImage\ object\ that\ is\ cropped\ without\ excess\ transparency\n
comment4.params=top\ bottom\ gi
comment4.target=boolean\ checkTransparentVertical(Coordinate,\ Coordinate,\ greenfoot.GreenfootImage)
comment4.text=\n\ Check\ in\ a\ straight,\ vertical\ line\ to\ see\ if\ every\ pixel\ in\ that\ line\ is\ transparent.\ This\ will\n\ help\ determine\ if\ the\ edge\ of\ a\ contiguous\ image\ has\ been\ reached.\ Edge\ safe.\n\n\ @param\ \ \ top\ Coordinate\ (x,y\ pair)\ of\ the\ top\ of\ the\ line\n\ @param\ \ \ bottom\ \ Coordinate\ (x,y\ pair)\ of\ the\ bottom\ of\ th\ eline\n\ @param\ \ \ bi\ \ The\ image\ to\ scan,\ as\ a\ bufferedImage\ (not\ GreenfootImage\!)\n
comment5.params=left\ right\ gi
comment5.target=boolean\ checkTransparentHorizontal(Coordinate,\ Coordinate,\ greenfoot.GreenfootImage)
comment5.text=\n\ Check\ in\ a\ straight,\ vertical\ line\ to\ see\ if\ every\ pixel\ in\ that\ line\ is\ transparent.\ This\ will\n\ help\ determine\ if\ the\ edge\ of\ a\ contiguous\ image\ has\ been\ reached.\ Edge\ safe.\n\n\ @param\ \ \ top\ Coordinate\ (x,y\ pair)\ of\ the\ top\ of\ the\ line\n\ @param\ \ \ bottom\ \ Coordinate\ (x,y\ pair)\ of\ the\ bottom\ of\ th\ eline\n\ @param\ \ \ bi\ \ The\ image\ to\ scan,\ as\ a\ bufferedImage\ (not\ GreenfootImage\!)\n
comment6.params=anim\ leftTrim\ rightTrim\ topTrim\ bottomTrim
comment6.target=Animation\ trim(Animation,\ int,\ int,\ int,\ int)
comment7.params=anim\ leftPad\ rightPad\ topPad\ bottomPad
comment7.target=Animation\ matchLargest(Animation,\ int,\ int,\ int,\ int)
comment8.params=images\ leftPad\ rightPad\ topPad\ bottomPad
comment8.target=greenfoot.GreenfootImage[][]\ matchLargest(greenfoot.GreenfootImage[][],\ int,\ int,\ int,\ int)
comment9.params=images\ leftPad\ rightPad\ topPad\ bottomPad
comment9.target=greenfoot.GreenfootImage[]\ matchLargest(greenfoot.GreenfootImage[],\ int,\ int,\ int,\ int)
numComments=13
